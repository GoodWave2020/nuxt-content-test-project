[{"data":1,"prerenderedAt":21},["ShallowReactive",2],{"demo-json":3},{"id":4,"title":5,"author":6,"body":7,"description":8,"extension":9,"items":10,"meta":11,"metadata":10,"navigation":12,"path":13,"publishedAt":14,"seo":15,"stem":16,"tags":17,"__hash__":20},"content/demo-json.json","JSONでのコンポーネント呼び出しデモ","Demo Author","# JSONでのコンポーネント呼び出しデモ\n\nJSONファイルの`body`フィールドにMarkdownとMDC構文を記述できます。\n\n## JSONの注意点\n\n::alert{type=\"warning\"}\nJSONでは改行を`\\n`でエスケープする必要があり、やや読みにくくなります。\n::\n\n### 基本的な使い方\n\n::card{title=\"JSON形式\" icon=\"🔤\" color=\"blue\"}\nJSONはプログラムでの生成に適しています。\nAPIから取得したデータをそのまま保存できます。\n::\n\n## コンポーネント呼び出し例\n\n::feature-card{title=\"プログラム生成\" icon=\"⚙️\" color=\"purple\"}\nJSONはプログラムから動的に生成するのに最適です。\nデータベースやAPIのレスポンスをそのまま使えます。\n::\n\n::feature-card{title=\"型安全\" icon=\"🛡️\" color=\"green\"}\nTypeScriptと組み合わせることで、\n完全な型安全性を実現できます。\n::\n\n## 推奨事項\n\n::alert{type=\"info\"}\n💡 **ヒント:** 人が手書きする場合はMarkdownやYAMLを推奨します。\nJSONはプログラム生成時に使用するのがベストです。\n::\n\n::card{title=\"使い分け\" icon=\"🎯\" color=\"red\"}\n- 手書き → Markdown/YAML\n- プログラム生成 → JSON\n- データ管理 → YAML/JSON\n- リッチコンテンツ → Markdown\n::\n\n## まとめ\n\n::alert{type=\"success\"}\n✅ JSONファイルからもコンポーネントが正常に動作しました！\n::","JSONのbodyフィールドでMDC構文を使った実例","json",null,{},true,"/demo-json","2025-01-18",{"title":5,"description":8},"demo-json",[9,18,19],"components","demo","WqQrnucu8avSs3AAf0gf7EvhbMeBgSNwl91bBZ3cEXU",1760867873284]